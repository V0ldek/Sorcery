@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@_isDarkMode" Theme="_matTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" aria-label="Menu" />
        <MudAvatar Variant="Variant.Filled">
            <MudImage Src="/img/v0ldek.webp" Alt="my gravatar" Class="mud-avatar-img" ObjectFit="ObjectFit.Cover" />
        </MudAvatar>
        <MudText Typo="Typo.h5" Class="ml-3">Mat Gienieczko</MudText>
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="@_isDarkMode" Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" ToggledIcon="@Icons.Material.Filled.LightMode"
                             aria-label="Dark mode toggle"></MudToggleIconButton>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudIconButton Icon="@Icons.Material.Filled.RssFeed" Color="Color.Inherit" Href="/feed.rss" aria-label="RSS feed"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="@GitHub.Sorcery" aria-label="GitHub"></MudIconButton>
            <MudText Typo="Typo.body2" Class="ps-4"><footer><small>Copyright &copy; @_copyright Mateusz Gienieczko</small></footer></MudText>
        </MudHidden>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="@ThemeInfo">
            @Body
        </CascadingValue>
        <MudScrollToTop>
            <MudFab Color="Color.Dark" StartIcon="@Icons.Material.Filled.ArrowUpward" />
        </MudScrollToTop>
    </MudMainContent>
</MudLayout>

@code {

    string _copyright = ComputeCopyright();

    bool _drawerOpen = true;

    bool _isDarkMode = true;

    MudThemeProvider _mudThemeProvider = new();

    MudTheme _matTheme = ConfigureTheme();

    ThemeInfo ThemeInfo => new ThemeInfo(_isDarkMode, _matTheme);

    static MudTheme ConfigureTheme()
    {
        var theme = new MudTheme();

        theme.PaletteDark.TextPrimary = "#BEB9B0";

        theme.Palette.AppbarBackground = Colors.DeepOrange.Darken4;

        theme.PaletteDark.AppbarBackground = "#992B0A";
        theme.PaletteDark.Background = "#181A1B";
        theme.PaletteDark.BackgroundGrey = "#191B1C";
        theme.PaletteDark.DrawerBackground = "#1A1C1D";
        theme.PaletteDark.Surface = "1B1D1E";

        theme.Palette.Primary = Colors.DeepOrange.Darken2;
        theme.Palette.PrimaryDarken = Colors.DeepOrange.Darken3;
        theme.Palette.PrimaryLighten = Colors.DeepOrange.Darken1;

        theme.PaletteDark.Primary = "#E95C30";
        theme.PaletteDark.PrimaryDarken = "#DE562C";
        theme.PaletteDark.PrimaryLighten = "#F46234";

        theme.PaletteDark.InfoLighten = Colors.Blue.Lighten4;
        theme.PaletteDark.Info = Colors.Blue.Lighten3;
        theme.PaletteDark.InfoDarken = Colors.Blue.Lighten2;

        theme.PaletteDark.WarningLighten = Colors.Orange.Lighten3;
        theme.PaletteDark.Warning = Colors.Orange.Lighten2;
        theme.PaletteDark.WarningDarken = Colors.Orange.Lighten1;

        theme.PaletteDark.ErrorLighten = Colors.Red.Lighten3;
        theme.PaletteDark.Error = Colors.Red.Lighten2;
        theme.PaletteDark.ErrorDarken = Colors.Red.Lighten1;

        theme.Typography.H1.FontSize = "4rem";
        theme.Typography.H1.LetterSpacing = "-.00833em";
        theme.Typography.H1.LineHeight = 1.2;

        theme.Typography.Default.FontSize = theme.Typography.Body1.FontSize;
        theme.Typography.Default.FontWeight = theme.Typography.Body1.FontWeight;
        theme.Typography.Default.LetterSpacing = theme.Typography.Body1.LetterSpacing;
        theme.Typography.Default.LineHeight = theme.Typography.Body1.LineHeight;
        theme.Typography.Default.TextTransform = theme.Typography.Body1.TextTransform;

        return theme;
    }

    static string ComputeCopyright()
    {
        const int startYear = 2022;
        var year = DateTime.Now.Year;
        return year == startYear ? startYear.ToString() : $"{startYear} - {year}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
