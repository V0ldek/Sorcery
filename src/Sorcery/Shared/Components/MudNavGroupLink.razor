@inject NavigationManager NavigationManager

<div class="mud-nav-group">
    <MudNavLink Href="@Href" Match=@NavLinkMatch.Prefix Icon="@Icon" IconColor="@IconColor">
        <MudGrid Justify="Justify.SpaceBetween">
            <MudItem Style="max-width: 75%">@Title</MudItem>
            <MudItem Class="pa-0" Style="min-width: 25%">
                <MudToggleIconButton @bind-Toggled="Expanded" 
                    Icon="@CollapsedIcon" ToggledIcon="@ExpandedIcon" Variant="Variant.Text" 
                    Size="Size.Small" ToggledSize="Size.Small"
                    Style="width: 100%; height: 100%;"
                    @onclick:preventDefault="true"/>
            </MudItem>
        </MudGrid>
    </MudNavLink>
    <MudCollapse Expanded="@Expanded" Class="mud-navgroup-collapse">
        <MudNavMenu>
            @ChildContent
        </MudNavMenu>
    </MudCollapse>
    <NavLink></NavLink>
</div>

@code {
    public bool IsActive { get; private set; }

    /// <summary>
    ///     Returns whether the group is currently expanded.
    /// </summary>
    [Parameter]
    public bool Expanded { get; set; }

    /// <summary>
    ///     Icon to use, if set.
    /// </summary>
    [Parameter]
    public string? Icon { get; set; }

    /// <summary>
    ///     The color of the icon. It supports the theme colors, default value uses the themes drawer color.
    /// </summary>
    [Parameter]
    public Color IconColor { get; set; } = Color.Default;

    /// <summary>
    ///     Link to a URL when clicked.
    /// </summary>
    [Parameter]
    [EditorRequired]
    public string Href { get; set; } = null!;

    /// <summary>
    ///     Title displayed on the group.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public NavLinkMatch Match { get; set; }

    /// <summary>
    ///     The expand Icon that will be used in the collapsed state.
    /// </summary>
    [Parameter]
    public string CollapsedIcon { get; set; } = @Icons.Filled.ArrowDropDown;

    /// <summary>
    ///     The hide Icon that will be used in the expanded state.
    /// </summary>
    [Parameter]
    public string ExpandedIcon { get; set; } = @Icons.Filled.ArrowDropUp;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private Uri? _absoluteHref;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override void OnParametersSet()
    {
        _absoluteHref = NavigationManager.ToAbsoluteUri(Href);
        IsActive = Matches(NavigationManager.Uri);
        Expanded = Expanded || IsActive;
        base.OnParametersSet();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        var newActive = Matches(NavigationManager.Uri);

        if (newActive != IsActive)
        {
            IsActive = newActive;
            Expanded = Expanded || IsActive;
            StateHasChanged();
        }
    }

    private bool Matches(string absoluteUri)
    {
        if (_absoluteHref is null)
        {
            return false;
        }

        var href = _absoluteHref.AbsoluteUri;

        if (string.Equals(absoluteUri, href, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (absoluteUri.Length == href.Length + 1 && absoluteUri[^1] == '/')
        {
            return true;
        }

        if (Match == NavLinkMatch.Prefix && absoluteUri.StartsWith(href, StringComparison.OrdinalIgnoreCase))
        {
            return href.Length == 0 || href[^1] == '/' || absoluteUri[href.Length] == '/';
        }

        return false;
    }

    protected void ExpandedToggle()
    {
        Expanded = !Expanded;
    }
}
