@inject IJSRuntime JSRuntime;

<MudLink Typo="Typo.inherit" Underline="Underline.Hover" @attributes=Attributes @onclick="OnClickAsync" style="cursor: pointer">
    @ChildContent
</MudLink>

@code {
    [Parameter]
    [EditorRequired]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public string Id { get; set; } = "";

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> Attributes { get; set; } = new Dictionary<string, object>();

    private static IJSInProcessObjectReference? _currentIntralinkFocus = null;

    private async Task OnClickAsync()
    {
        if (Id is not null)
        {
            var container = await JSRuntime.InvokeAsync<IJSInProcessObjectReference>("document.getElementById", Id);
            await container.InvokeVoidAsync("scrollIntoView", new
            {
                block = "center"
            });
            await container.InvokeVoidAsync("focus");
            await container.InvokeVoidAsync("setAttribute", "data-intralink-focused", "");

            if (_currentIntralinkFocus is not null)
            {
                try
                {
                    await _currentIntralinkFocus.InvokeVoidAsync("removeAttribute", "data-intralink-focused");
                }
                catch
                {
                    // This can fail in a multitude of ways, for example if the element got invalidated or removed
                    // between the calls. Hopefully it means that the attribute doesn't exist anymore anyway, so we just ignore.
                }
            }

            _currentIntralinkFocus = container;
        }
    }
}
