@page "/teaching/csharp/7-aspnet-core/0-minimal-http-server"
@inject CourseBook CourseBook;

@{
    var course = CourseBook.CSharpCourse["aspnet-core"]["minimal-http-server"];
}

<CourseSection Section="@course">
    <MudText>
        Creating a project for ASP.NET core is a bit different from what we've been doing thus far.
        We need to use a different SDK and a completely different project type for the entry project.
        Navigate to the <code>07-ASP.NETCore/DungeonWalker.Api</code> directory in 
        <Link Href="@GitHub.CSharpNotebooks" Target="_blank">the notebooks repository</Link>
        and run:
    </MudText>
    <CodeBlock Language="powershell" Code="@(@"
dotnet new webapi -o DungeonWalker.Api
dotnet sln add ./DungeonWalker.Api")"/>
    <MudText>
        This will create a bunch of stuff for an example web API. Let's take it step-by-step, first the <code>csproj</code>:
    </MudText>
    <CodeBlock Language="xml" FileName="DungeonWalker.Api.csproj" LineNumbers="true" Code="@(@"
<Project Sdk=""Microsoft.NET.Sdk.Web"">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include=""Swashbuckle.AspNetCore"" Version=""6.2.3"" />
  </ItemGroup>

</Project>
    ")"/>
    <MudText GutterBottom="true">
        The switch to ASP.NET Core is signified with the top line, where we use the Web SDK to build the project.
        This hooks up relevant <Code>AspNetCore</Code> libraries as implicit dependencies, some analysers, as well as
        better first-class support from CLI and IDEs.
    </MudText>
    <MudText>
        The rest is basically the same, the referenced <Code>Swashbuckle</Code> package gives us Swagger support for free
        &ndash; more on that later. Now let's take a look at the core of the project, <code>Program.cs</code>.
    </MudText>
    <CodeBlock FileName="Program.cs" LineNumbers="true" Code="@(@"
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
    ")"/>
    <MudText GutterBottom="true">
        Server configuration happens inside a builder. We first add services to the Dependency Injection mechanism, which allows
        us to resolve implementation of services in a clean manner &ndash; more on that also later. <Code>AddControllers</Code>
        is a core method that makes our server run. Then a lot of Swagger things follow. In the end, we configure automatic
        redirection from HTTP to HTTPS (a standard practice for all HTTP accessible servers), configure authorization services
        (which we won't use), configure routing with <Code>MapControllers</Code> and run the server.
    </MudText>
    <MudText>
        You can now run the server with <Code Language="PowerShell">dotnet run --project ./DungeonWalker.Api</Code>. The output
        will look something like this, modulo paths and port numbers:
    </MudText>
    <CodeBlock Language="plain" Code="@(@"
Building...
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: https://localhost:7176
info: Microsoft.Hosting.Lifetime[14]
      Now listening on: http://localhost:5255
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Development
info: Microsoft.Hosting.Lifetime[0]
      Content root path: C:\Projects\Sorcery-CSharp-Notebooks\07-ASP.NETCore\DungeonWalker.Api\
    ")"/>
    <MudText id="setup-ports">
        Let's tackle the ports first. They are set in <code>Properties/launchSettings.json</code>.
        Change the <code>profiles['DungeonWalker.Api'].applicationUrl</code> values to point to ports
        $10443$ and $10080$ for HTTPS and HTTP, respectively. We can now use <Code Language="powershell">curl</Code>
        to get some response from our server.
    </MudText>
    <LatexRenderer ContainerId="setup-ports"/>
    <CodeBlock Language="plain" Code="@(@"
curl localhost:10080 --verbose
*   Trying 127.0.0.1:10080...
* Connected to localhost (127.0.0.1) port 10080 (#0)
> GET / HTTP/1.1
> Host: localhost:10080
> User-Agent: curl/7.79.1
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1  Temporary Redirect
< Content-Length: 0
< Date: Tue, 17 May 2022 17:52:45 GMT
< Server: Kestrel
< Location: https://localhost:10443/
<
* Connection #0 to host localhost left intact

curl https://localhost:10443 --verbose
*   Trying 127.0.0.1:10443...
* Connected to localhost (127.0.0.1) port 10443 (#0)
* schannel: disabled automatic use of client certificate
* schannel: ALPN, offering http/1.1
* schannel: ALPN, server accepted to use http/1.1
> GET / HTTP/1.1
> Host: localhost:10443
> User-Agent: curl/7.79.1
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 404 Not Found
< Content-Length: 0
< Date: Tue, 17 May 2022 17:54:20 GMT
< Server: Kestrel
<
* Connection #0 to host localhost left intact
    ")"/>
    <MudText>
        This is as expected &ndash; HTTP redirects us to HTTPS, and HTTPS endpoint gives us 404, since our server doesn't serve anything on the <code>/</code> route.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Controllers and Routing</MudText>
    <MudText GutterBottom="true">
        Routing is what our server does when it gets a request to determine what code to run to serve the request.
        The <em>route</em> is the part of the URL after the root server URL, so when making a request
        to <Link Href="https://gienieczko.com/teaching/csharp/7-aspnet-core/0-minimal-http-server">
            https://gienieczko.com/teaching/csharp/7-aspnet-core/0-minimal-http-server
        </Link>
        the route is '<code>/teaching/csharp/7-aspnet-core/0-minimal-http-server</code>'.
        The server has to parse that route and, em, route it to the correct handler, which in case of an ASP.NET Core is an <em>action</em>
        defined in a <em>controller</em>.
        The route isn't only a path, for example in <Link Href="https://duckduckgo.com/?q=gienieczko&t=h_&ia=web">
        https://duckduckgo.com/?q=gienieczko&t=h_&ia=web</Link> we have the path '<code>/</code>', but also three query parameters:
        '<code>q</code>' with value '<code>gienieczko</code>', '<code>t</code>' with value '<code>h_</code>', and '<code>ia</code>'
        with value '<code>web</code>'.
    </MudText>
    <MudText>
        In ASP.NET Core the router parses the URL and determines which controller action to call. It can parse the query parameters
        from the URL and the body of the request (if there is a body), provide it as parameters to the action, and then interpret the return
        value as the response. Here is the example controller that exists in the generated template:
    </MudText>
    <CodeBlock FileName="Controllers/WeatherForecastController.cs" LineNumbers="true" Code="@(@"
using Microsoft.AspNetCore.Mvc;

namespace DungeonWalker.Api.Controllers;

[ApiController]
[Route(""[controller]"")]
public class WeatherForecastController : ControllerBase
{
    private static readonly string[] Summaries = new[]
    {
        ""Freezing"", ""Bracing"", ""Chilly"", ""Cool"", ""Mild"", ""Warm"", ""Balmy"", ""Hot"", ""Sweltering"", ""Scorching""
    };

    private readonly ILogger<WeatherForecastController> _logger;

    public WeatherForecastController(ILogger<WeatherForecastController> logger)
    {
        _logger = logger;
    }

    [HttpGet(Name = ""GetWeatherForecast"")]
    public IEnumerable<WeatherForecast> Get()
    {
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = DateTime.Now.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = Summaries[Random.Shared.Next(Summaries.Length)]
        })
        .ToArray();
    }
}
    ")"/>
    <MudText>
        Let's break it down:
    </MudText>
    <MudList>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            The controller is defined as a class inheriting from <Code>ControllerBase</Code>
            with the special <Code>ApiControllerAttribute</Code>.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            The <Code>RouteAttribute</Code> defines how to access the controller.
            The special '<code>[controller]</code>' value evaluates to the controller class name
            with '<code>Controller</code>' stripped, so in this case it's '<code>weatherForecast</code>'
            (URL-s are case insensitive).
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            The controller has a <Code>ILogger&lt;WeatherForecastController&gt;</Code> dependency
            that is magically given to it in the constructor. This is Dependency Injection.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            The controller's action is called <Code>Get</Code> and returns a sequence of
            <Code>WeatherForecast</Code> objects. The <Code>Name</Code> is a friendly name
            given to an action, e.g. allowing us to create a link to this particular action
            just by using the name. It defines no explicit route, thus it is triggered
            simply when a GET request is given to the root controller route.
        </MudListItem>
    </MudList>
    <MudText>
        We can see how this works in action right now, by issuing a GET to this action:
    </MudText>

    <CodeBlock Language="plain" Code="@(@"
curl https://localhost:10443/weatherForecast --verbose
*   Trying 127.0.0.1:10443...
* Connected to localhost (127.0.0.1) port 10443 (#0)
* schannel: disabled automatic use of client certificate
* schannel: ALPN, offering http/1.1
* schannel: ALPN, server accepted to use http/1.1
> GET /weatherForecast HTTP/1.1
> Host: localhost:10443
> User-Agent: curl/7.79.1
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Content-Type: application/json; charset=utf-8
< Date: Tue, 17 May 2022 19:27:56 GMT
< Server: Kestrel
< Transfer-Encoding: chunked
<
[{""date"":""2022-05-18T21:27:57.0462085+02:00"",""temperatureC"":-11,""temperatureF"":13,""summary"":""Balmy""},{""date"":""2022-05-19T21:27:57.0462166+02:00"",""temperatureC"":4,""temperatureF"":39,""summary"":""Chilly""},{""date"":""2022-05-20T21:27:57.0462176+02:00"",""temperatureC"":51,""temperatureF"":123,""summary"":""Hot""},{""date"":""2022-05-21T21:27:57.0462179+02:00"",""temperatureC"":-4,""temperatureF"":25,""summary"":""Warm""},{""date"":""2022-05-22T21:27:57.0462181+02:00"",""temperatureC"":31,""temperatureF"":87,""summary"":""Freezing""}]* Connection #0 to host localhost left intact
    ")"/>
    <MudText>
        Okay, so it works. We have no idea how the controller gets instantiated, though. Does it even initialise
        the <Code>_logger</Code> field? Let's try to log something, change the <Code>Get</Code> body to:
    </MudText>
    <CodeBlock FileName="Controllers/WeatherForecastController.cs" Code="@(@"
[HttpGet(Name = ""GetWeatherForecast"")]
public IEnumerable<WeatherForecast> Get()
{
    var numberOfDays = Random.Shared.Next(5, 10);
    _logger.LogInformation(""Randomised {Days} days to return..."", numberOfDays);

    return Enumerable.Range(1, numberOfDays).Select(index => new WeatherForecast
    {
        Date = DateTime.Now.AddDays(index),
        TemperatureC = Random.Shared.Next(-20, 55),
        Summary = Summaries[Random.Shared.Next(Summaries.Length)]
    })
    .ToArray();
}
    ")"/>
    <MudText>
        Restart the server and run the <code>curl</code> again. You should see the following appear in the server's terminal
        (modulo the number of days):
    </MudText>
    <CodeBlock Language="plain" Code="@(@"
info: DungeonWalker.Api.Controllers.WeatherForecastController[0]
      Randomised 7 days to return...")"
    />
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Middleware</MudText>
    <MudText>
        The ASP.NET Core server is based around middleware. A request to the server goes through a pipeline of methods
        that take the request, operate on the response, and call the next one in the sequence, creating a stack of execution.
        A middleware component can also short-circuit the pipeline and return early.
    </MudText>
    <MudPaper Class="my-4 pa-4 d-flex justify-center align-center" Elevation="5">
        <MudImage Alt="middleware pipeline" ObjectPosition="ObjectPosition.Center" 
            Fluid="true" Src="/img/middleware-pipeline.svg" ObjectFit="ObjectFit.Fill"/>
    </MudPaper>
    <MudText>
        We can write and provide our own middleware to plug-in to this pipeline. This is a very powerful tool, allowing us
        to customise our server. You could write your own server from first principles using it. Usually we install
        some preimplemented middleware to get commonly used functionality. Every <Code>UseX</Code> call
        in <code>Program.cs</code> is a middleware. There are preimplemented middlewares for common things like
        cookies, CORS, cache, compression, sessions, etc. There's a ton more available as NuGet packages.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Cancellation</MudText>
    <MudText GutterBottom="true">
        ASP.NET Core injects <Code>CancellationToken</Code> values corresponding to the outside request
        into controller actions, as long as they have an appropriate parameter. Supporting cancellation in ASP.NET
        Core requires simply adding that last <Code>CancellationToken cancellationToken</Code> parameter to your method.
    </MudText>
    <MudText>
        You should always use it. There's no sense in wasting server resources when the outgoing request was cancelled
        by the user.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Summary</MudText>
    <MudText>
        We know how to setup the skeleton for an HTTP server, complete with HTTPS support. We know what routing is and
        how they are resolved into controllers and actions
    </MudText>
    <Resources Links=@(new [] {
        ("https://docs.microsoft.com/en-us/aspnet/core/fundamentals/?view=aspnetcore-6.0", "ASP.NET Core fundamentals overview"),
        ("https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0", "ASP.NET Core Middleware"),
    })/>
</CourseSection>

@code {

}
