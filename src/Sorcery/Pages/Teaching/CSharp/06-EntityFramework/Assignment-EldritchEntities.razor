@page "/teaching/csharp/6-entity-framework/assignment/6-eldritch-entities"
@inject CourseBook CourseBook;

<CourseAssignment Assignment="@CourseBook.CSharpCourse["entity-framework"].Assignment">
    <MudText>
        Feeble text documents are not enough to convince the Heroes that those Dungeons can be beaten.
        We need something more tangible, a pattern that can be seen and studied. A schema.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Overview</MudText>
    <MudText GutterBottom="true">
        The goal of this assignment is to implement the <Code>IDungeonRepository</Code> interface known from
        the <Link Href="@CourseBook.CSharpCourse["asynchrony"].Assignment!.Route">previous assignment</Link>,
        but using Entity Framework with an SQLite database.
    </MudText>
    <MudText>
        First we will need to define a slightly different model of a graph, more suited for a relational database.
        This is a common pattern in designing well-decoupled software, where there are multiple models of data
        suited for different tasks with mappings defined between them. We will also have to deal with <Code>LootPile</Code>
        being a pain for a relational model. In the end we will have to save and load our graphs with a well-designed LINQ query.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 0. &ndash; Graph Model</MudText>
    <MudText GutterBottom="true">
        Our model in <Code>DungeonWalker.DataLayer.Serialization</Code> requires the vertices to be persisted in an order,
        since that order is used in the adjacency list encoding. However, to persist an ordered collection in a relational database
        we need to explicitly define a model that will keep the ordinal number with the elements &ndash; there is no built-in solution.
    </MudText>
    <MudPaper MaxHeight="500px" MaxWidth="50%" Style="float: left" Class="mr-3 mb-3 pa-3" Elevation="5">
        <MudImage Alt="ERD diagram of the database" title="ERD diagram of the database" Src="img/dungeonwalker-database-schema.webp" Fluid="true" Height="500" Width="500" />
    </MudPaper>
    <MudText GutterBottom="true">
        The .NET classes are already defined for you. We will use the same <Code>RoomTemplate</Code> hierarchy for rooms and loot,
        but the graph is redefined in <Code>DungeonWalker.DataLayer.Sql.Model</Code>. All data and navigation properties are already
        defined, there is no need to modify the types in any way.
    </MudText>
    <MudText GutterBottom="true">
        You need to define the actual model in <Code>DungeonWalkerDbContext.OnModelCreating</Code>. It should use <Link Href="https://docs.microsoft.com/en-us/ef/core/modeling/inheritance#table-per-hierarchy-and-discriminator-configuration">TPH inheritance</Link>
        for both rooms and loot. The core entity is <Code>Graph&lt;RoomTemplate&gt;</Code> and will be the one queried in the repository implementation.
        Included is an ERD diagram of the expected database schema.
    </MudText>
    <MudText>
        After you create a model, generate the migration and call it <code>DungeonGraphs</code>. Then setup a local SQLite database. 
        This is done with the following magic spells, ran from the root solution directory:
    </MudText>
    <CodeBlock Language="PowerShell" Code="@(@"
dotnet ef migrations add DungeonGraphs --project ./src/DungeonWalker.DataLayer.Sql
dotnet ef database update --project ./src/DungeonWalker.DataLayer.Sql
    ")"/>
    <MudText>
        This assumes you have the <code>dotnet-ef</code> tool installed. As a reminder, we install it with:
    </MudText>
    <CodeBlock Language="PowerShell" Code="@(@"
dotnet tool install --global dotnet-ef
    ")"/>
    <MudText>
        The database is created as <code>DungeonWalker.db</code> in your local user folder.
    </MudText>
    <MudList>
        <MudListItem Icon="fa-brands fa-windows">On Windows, it's in your user's <code>AppData\Local</code> directory.</MudListItem>
        <MudListItem Icon="fa-brands fa-linux">On Linux, it's in the <code>/home/{user}/.local/share</code> directory.</MudListItem>
        <MudListItem Icon="fa-brands fa-apple">On OSX, it's in the <code>/Users/{user}/.local/share</code> directory.</MudListItem>
    </MudList>
    <MudText GutterBottom="true">
        You can connect to the database from the outside, which should be useful for debugging. I recommend <Link Href="https://dbeaver.io/download/">DBeaver</Link>,
        (Community Edition), an open-source database tool. Its usage is straightforward, the only hard thing is 
        <Link Href="https://programmersought.com/article/24818171626/">installing the dark mode</Link>.
    </MudText>
    <MudText>
        And to drive the point home even more, here's the migration script generated from the expected model. You can get
        yours with <Code Language="PowerShell">dotnet ef migrations script --project ./src/DungeonWalker.DataLayer.Sql</Code>.
    </MudText>
    <CodeBlock Language="SQL" Code="@(@"
CREATE TABLE IF NOT EXISTS ""__EFMigrationsHistory"" (
    ""MigrationId"" TEXT NOT NULL CONSTRAINT ""PK___EFMigrationsHistory"" PRIMARY KEY,
    ""ProductVersion"" TEXT NOT NULL
);

BEGIN TRANSACTION;

CREATE TABLE ""Graph"" (
    ""Id"" INTEGER NOT NULL CONSTRAINT ""PK_Graph"" PRIMARY KEY AUTOINCREMENT,
    ""Name"" TEXT NOT NULL
);

CREATE TABLE ""Loot"" (
    ""Id"" INTEGER NOT NULL CONSTRAINT ""PK_Loot"" PRIMARY KEY AUTOINCREMENT,
    ""Discriminator"" TEXT NOT NULL,
    ""LootPileLootTemplateId"" INTEGER NULL,
    ""Armour"" INTEGER NULL,
    ""AttackDamage"" INTEGER NULL,
    ""HealPercentage"" REAL NULL,
    ""PredefinedLootName"" TEXT NULL,
    CONSTRAINT ""FK_Loot_Loot_LootPileLootTemplateId"" FOREIGN KEY (""LootPileLootTemplateId"") REFERENCES ""Loot"" (""Id"")
);

CREATE TABLE ""Room"" (
    ""Id"" INTEGER NOT NULL CONSTRAINT ""PK_Room"" PRIMARY KEY AUTOINCREMENT,
    ""Discriminator"" TEXT NOT NULL,
    ""EnemyType"" TEXT NULL,
    ""LootDataId"" INTEGER NULL,
    CONSTRAINT ""FK_Room_Loot_LootDataId"" FOREIGN KEY (""LootDataId"") REFERENCES ""Loot"" (""Id"")
);

CREATE TABLE ""GraphVertex"" (
    ""Id"" INTEGER NOT NULL CONSTRAINT ""PK_GraphVertex"" PRIMARY KEY AUTOINCREMENT,
    ""GraphId"" INTEGER NOT NULL,
    ""OrdinalNumber"" INTEGER NOT NULL,
    CONSTRAINT ""FK_GraphVertex_Graph_GraphId"" FOREIGN KEY (""GraphId"") REFERENCES ""Graph"" (""Id"") ON DELETE CASCADE,
    CONSTRAINT ""FK_GraphVertex_Room_Id"" FOREIGN KEY (""Id"") REFERENCES ""Room"" (""Id"") ON DELETE CASCADE
);

CREATE TABLE ""GraphEdge"" (
    ""Id"" INTEGER NOT NULL CONSTRAINT ""PK_GraphEdge"" PRIMARY KEY AUTOINCREMENT,
    ""SourceId"" INTEGER NOT NULL,
    ""TargetId"" INTEGER NOT NULL,
    CONSTRAINT ""FK_GraphEdge_GraphVertex_SourceId"" FOREIGN KEY (""SourceId"") REFERENCES ""GraphVertex"" (""Id"") ON DELETE CASCADE,
    CONSTRAINT ""FK_GraphEdge_GraphVertex_TargetId"" FOREIGN KEY (""TargetId"") REFERENCES ""GraphVertex"" (""Id"") ON DELETE CASCADE
);

CREATE UNIQUE INDEX ""IX_Graph_Name"" ON ""Graph"" (""Name"");

CREATE INDEX ""IX_GraphEdge_SourceId"" ON ""GraphEdge"" (""SourceId"");

CREATE INDEX ""IX_GraphEdge_TargetId"" ON ""GraphEdge"" (""TargetId"");

CREATE UNIQUE INDEX ""IX_GraphVertex_GraphId_OrdinalNumber"" ON ""GraphVertex"" (""GraphId"", ""OrdinalNumber"");

CREATE INDEX ""IX_Loot_LootPileLootTemplateId"" ON ""Loot"" (""LootPileLootTemplateId"");

CREATE UNIQUE INDEX ""IX_Room_LootDataId"" ON ""Room"" (""LootDataId"");

INSERT INTO ""__EFMigrationsHistory"" (""MigrationId"", ""ProductVersion"")
VALUES ('20220513135121_DungeonGraphs', '6.0.5');

COMMIT;
    ")"/>
    <MudAlert Class="my-4" Variant="Variant.Outlined">
        This is NOT tested by any test groups. You can verify soundness manually by consulting the script and ERD diagram.
    </MudAlert>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 1. &ndash; Loot Pile Issue</MudText>
    <MudText GutterBottom="true">
        There's an issue we need to tackle before we save the graph to our database. Currently the loot is a very complex
        object that can potentially be an arbitrary tree of <Code>LootPile</Code> entities. Retrieving such a structure from
        the database is complex. By default we would have to write a recursive query that traverses the levels of the tree.
        Another way would be to denormalise the database and include enough data that we could extract the entire tree at once.
        To keep things simple and less tedious, we ditch the idea of nested <Code>LootPile</Code> objects for the purposes
        of this assignment.
    </MudText>
    <MudText>
        To do that, you need to ensure two things. First, implement the <Code>LootPileLootTemplate.Flatten()</Code> method
        that returns an equivalent, flattened <Code>LootPileLootTemplate</Code>. Flattened here means that we only leave a single
        root <Code>LootPileLootTemplate</Code> and all the leaves of the original tree become immediate children of the pile.
        For example, the loot pile:
        <CodeBlock Language="plain" Code="@(@"
- LootPile
  - Chainmail +25
  - LootPile
    - DamageCrystal +10
    - LootPile
      - TwoHandedSword
      - EssenceOfMagic
  - HealthPotion 50%
    ")"/>
    becomes:
        <CodeBlock Language="plain" Code="@(@"
- LootPile
  - Chainmail +25
  - DamageCrystal +10
  - TwoHandedSword
  - EssenceOfMagic
  - HealthPotion 50%
    ")"/>
    The order of the objects is arbitrary. Secondly, before saving a graph
    you will have to make sure to flatten all the rooms first using <Code>LootRoomTemplate.FlattenLootPiles</Code>.
    </MudText>
    <MudAlert Class="my-4" Variant="Variant.Outlined">
        This is tested by the "LootPileSerialization" test group, worth <Highlight>0.5</Highlight> points.
    </MudAlert>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 2. &ndash; SQL Repository</MudText>
    <MudText GutterBottom="true">
        Finish the implementation of <Code>DungeonWalker.FileSystem.Sql.SqlDungeonRepository</Code>, inheriting
        from <Code>DungeonRepositoryBase</Code> defined in the previous assignment. Any exceptions thrown during accessing the
        database should be rethrown wrapped in <Code>SqlRepositoryException</Code>.
    </MudText>
    <MudText>
        Hints and warnings:
    </MudText>
    <MudList>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            Remember that the save semantics are "overwrite if exists". For a database that means that you need to
            first remove a graph with the given name, if it exists.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            @{
                var navigation = CourseBook.CSharpCourse["entity-framework"]["navigation-properties"];
            }
            The relation model is quite deep. You will need to use stuff described in <Link Href="@(navigation.Route)">@(navigation.DisplayName)</Link>,
            including <Code>ThenInclude</Code>, which you can find in the linked resource: <Link Href="https://docs.microsoft.com/en-us/ef/core/querying/related-data/eager">Eager Loading of Related Data</Link>.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            During loading, try to perform as much simplification as possible inside the query. If you need only a list of numbers
            of vertices to reconstruct the graph, <Code Language="SQL">SELECT</Code> only the numbers, not all the edges. If you need
            to sort some data, try to sort it on the database instead of locally.
        </MudListItem>
        <MudListItem>
            To display queries and other diagnostic information from the database, use the <Code>DungeonWalkerDbContext</Code>'s
            constructor overload with <Code>LogLevel</Code>, specifying <Code>Information</Code> or even <Code>Debug</Code>.
        </MudListItem>
    </MudList>
    <MudText>
        Here's a small query that can help you dump a saved graph using SQL, so you can verify the database structure from outside C#.
    </MudText>
    <CodeBlock Language="SQL" Code="@(@"
WITH RawRooms
AS
(
  SELECT r.Id, gv.OrdinalNumber, (SUBSTR(r.Discriminator, 1, LENGTH(r.Discriminator) - 8)) || gv.OrdinalNumber AS Name
	FROM Graph g
	JOIN GraphVertex gv
	  ON g.Id = gv.GraphId
	JOIN Room r
	  ON r.Id = gv.Id
	WHERE g.Name = 'Test Graph'
  ORDER BY gv.OrdinalNumber
)
SELECT 
	rr.Id AS RoomId,
	rr.Name AS Name,
	rd.EnemyType AS Combat,
	l.Discriminator AS LootType,
	l.PredefinedLootName AS PredefinedLootName,
	pl.Discriminator AS NestedLootType,
	pl.PredefinedLootName AS NestedLootPredefinedName
  FROM RawRooms rr
  JOIN Room rd
    ON rr.Id = rd.Id
  LEFT JOIN Loot l
    ON rd.LootDataId = l.Id
  LEFT JOIN Loot pl
    ON l.Id = pl.LootPileLootTemplateId
ORDER BY rr.OrdinalNumber")"/>
    <MudAlert Class="my-4" Variant="Variant.Outlined">
        This is tested by the "SqlDungeonRepository" test group, worth <Highlight>1</Highlight> point.
    </MudAlert>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Demo</MudText>
    <MudText>
        As before, there is a demo. It's located in a new console project, <Code>DungeonWalker.SqlRepositoryDemo</Code>.
        The expected output is as before, only that there might be some logging information from the database in between.
    </MudText>
    <MudAlert Class="my-4" Variant="Variant.Outlined">
        This demo is worth <Highlight>0.5</Highlight> points.
    </MudAlert>
</CourseAssignment>
@code {

}
