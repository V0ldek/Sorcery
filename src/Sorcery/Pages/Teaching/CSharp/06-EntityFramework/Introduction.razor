@page "/teaching/csharp/6-entity-framework"
@inject CourseBook CourseBook;

<CourseModuleIntroduction Module="@CourseBook.CSharpCourse["entity-framework"]">
    <MudText GutterBottom="true">
        Time to learn the other part of LINQ &ndash; the <Code>IQueryable&lt;T&rt;</Code>
        interface and LINQ-to-SQL, using Entity Framework. In this module we will learn:
    </MudText>
        
    <MudList Class="d-block my-4" DisablePadding="true">
        <MudListItem Icon="@Icons.Filled.ChevronRight">simple <Code>Thread</Code> usage;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">the <Code>lock</Code> statement</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">events;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">exception handling, <Code>catch</Code>, <Code>finally</Code> blocks;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">disposable resources, <Code>IDisposable</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">asynchrony;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight"><Code>Task</Code>, <Code>Task&lt;TResult&rt;</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight"><Code>async</Code>, <Code>await</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight"><Code>Task.WhenAll</Code>, <Code>Task.WhenAny</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">intuition behind <Code>await</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">the <Code>ThreadPool</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">entering the pool with <Code>Task.Run</Code> and <Code>Task.Factory.StartNew</Code>;</MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">supporting cancellation with <Code>CancellationToken</Code> and <Code>CancellationTokenSource</Code>.</MudListItem>
    </MudList>
</CourseModuleIntroduction>

@code {

}
