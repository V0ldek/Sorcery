@page "/teaching/csharp/0-basics/assignment/0-dungeon-walker"
@inject CourseBook CourseBook;

<CourseAssignment Assignment="@CourseBook.CSharpCourse["basics"].Assignment">
    <MudText>
        A hero has entered the dungeon! They must traverse the dark rooms,
        looking for loot and defeating enemies, all the while avoiding vicious traps.
        Will they prevail, or will the forces of darkness win this time...?
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Overview</MudText>
    <MudText GutterBottom="true">
        We are writing an engine for a game, where a hero fights through a dungeon
        filled with various obstacles. A <Highlight>Dungeon</Highlight> is a list of
        <Highlight>Rooms</Highlight>, with one Room being the start point, and each
        Room except the last having a unique successor. The hero clears the dungeon
        room by room, advancing to the room's successor when they're done interacting
        with it. This is represented with the <Code>IDungeon</Code> interface:
    </MudText>
    <CodeBlock FileName="DungeonWalker/Logic/Dungeons/IDungeon.cs" Code="@(@"
namespace CSharpBasics.Logic.Dungeons;

public interface IDungeon
{
    IRoom? CurrentRoom { get; }
    
    string Description { get; }

    void AdvanceToNextRoom();
}
    ")"/>
    <MudText GutterBottom="true">
        A dungeon takes a <Code>IRoomLayout</Code> as an argument to its constructor,
        which tells it how to construct the rooms:
    </MudText>
    <CodeBlock FileName="DungeonWalker/Logic/Dungeons/IRoomLayout.cs" Code="@(@"
namespace CSharpBasics.Logic.Dungeons;

public interface IRoomLayout
{
    IRoom[] CreateRooms();

    string Description { get; }
}
    ")"/>
    <MudText GutterBottom="true">
        An <Code>IRoom</Code> is where the core of the logic happens.
    </MudText>    
    <CodeBlock FileName="DungeonWalker/Logic/Dungeons/IRoomLayout.cs" Code="@(@"
namespace CSharpBasics.Logic.Rooms;

public interface IRoom
{
    public ITurnOutcome Visit(Hero hero, PlayerStatistics statistics);
}

    ")"/>
    <MudText GutterBottom="true">
        It takes in the <Code>Hero</Code> instance and a <Code>PlayerStatistics</Code> object
        used for tracking the Hero's achievements. It then processes the encounter, returning
        an <Code>ITurnOutcome</Code>, that can display its information as a string.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Combat</MudText>
    <MudText>
        Encounters happen in a <Code>CombatRoom</Code>. Each <Code>Character</Code> in the game has three basic statistics:
    </MudText>
    <MudList id="statistics-list">
        <MudListItem Class="health" Icon="fas fa-heart">
            <MudText Color="Color.Default">
                <span class="health">Health</span> &ndash; when it falls to $0$ the character dies;
            </MudText>
        </MudListItem>
        <MudListItem Class="damage" Icon="fas fa-bolt-lightning">
            <MudText Color="Color.Default">
                <span class="damage">Attack damage</span> &ndash; the base damage of every attack performed by the character;
            </MudText>
        </MudListItem>
        <MudListItem Class="armour" Icon="fas fa-shield-blank">
            <MudText Color="Color.Default">
                <span class="armour">Armour</span> &ndash; absorbs damage, every attack against this character has its
                <span class="damage">damage</span> reduced by the <span class="armour">armour</span> value.
            </MudText>
        </MudListItem>
    </MudList>
    <MudText GutterBottom="true">
        Combat proceeds in rounds. Each round both characters prepare an attack
        and then receive the attacks simultaneously. Damage dealt to the character is the <span class="damage">attack damage</span>
        of the attacker minus the <span class="armour">armour</span> of the defender. 
        The character's <span class="health">health</span> is reduced by the damage received.
        Combat continues until either one or both characters die.
    </MudText>
    <MudText GutterBottom="true">
        Characters can have various special abilities that modify these rules. The basic characters
        included with the assignment have none. The logic of combat is implemented in <Code>CombatRoom</Code>:
    </MudText>
    <LatexRenderer ContainerId="statistics-list" />    
    <CodeBlock FileName="DungeonWalker/Logic/Rooms/CombatRoom.cs" Code="@(@"
namespace CSharpBasics.Logic.Rooms;

public sealed class CombatRoom : IRoom
{
    private readonly Enemy _enemy;

    public CombatRoom(Enemy enemy) => _enemy = enemy;

    public ITurnOutcome Visit(Hero hero, PlayerStatistics statistics)
    {
        var outcome = new CombatOutcome(hero, _enemy);

        while (hero.IsAlive && _enemy.IsAlive)
        {
            var playerVsEnemy = hero.PrepareAttack(_enemy);
            var enemyVsPlayer = _enemy.PrepareAttack(hero);

            var playerVsEnemyOutcome = _enemy.ReceiveAttack(playerVsEnemy);
            var enemyVsPlayerOutcome = hero.ReceiveAttack(enemyVsPlayer);

            statistics.EnemyAttacked(playerVsEnemyOutcome);
            statistics.PlayerAttacked(enemyVsPlayerOutcome);

            outcome.RecordCombatRound(playerVsEnemy, playerVsEnemyOutcome, enemyVsPlayer, enemyVsPlayerOutcome);
        }

        if (hero.IsAlive)
        {
            statistics.RoomCleared();
        }

        return outcome;
    }
}
    ")"/>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 0. &ndash; Dungeons</MudText>
    <MudText>
        The only preimplemented <Code>Dungeon</Code> is the <Code>LinearDungeon</Code>,
        which simply goes through the array of rooms until it reaches the end.
        Your first task is to create two other implementations:
    </MudText>    
    <MudList>
        <MudListItem Icon="fas fa-repeat">
            <MudText Color="Color.Default">
                <Code>CyclicalDungeon</Code> &ndash; a dungeon where the rooms repeat ad infinitum.
                When the hero reaches the last room and advances they are put in the first room again.
                The dungeon gets regenerated, i.e. all enemies respawn, loot appears again, etc.
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-right-left">
            <MudText Color="Color.Default">
                <Code>BackAndForthDungeon</Code> &ndash; similar to the cyclical variant, but here when
                the hero reaches the last room and advances they are put in the second to last room
                and start walking in the opposite direction. When directions switch, the dungeon gets regenerated.
                Similarly, when the hero reaches the first room again, they advance to the second room
                and flip their direction.
            </MudText>
        </MudListItem>
    </MudList>    
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        Each of these classes requires a public constructor taking a single argument
        of type <Code>IRoomLayout</Code>. They should be located in the <Code>DungeonWalker.Logic.Dungeons</Code> namespace.
    </MudAlert> 
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 1. &ndash; Rooms</MudText>
    <MudText>
        Existing rooms are <Code>EmptyRoom</Code>, which does nothing, and the <Code>CombatRoom</Code>.
        Implement two new rooms:
    </MudText>    
    <MudList>
        <MudListItem Icon="fas fa-vault">
            <MudText Color="Color.Default">
                <Code>LootRoom</Code> &ndash; a room that contains one of the three possible loots
                for the hero:
            </MudText>
            <MudList>
                <MudListItem Icon="fas fa-flask">
                    <MudText><Code>HealthPotionLoot</Code> that replenishes a percentage of the hero's initial' <span class="health">health</span>.</MudText>
                </MudListItem>
                <MudListItem Icon="fas fa-gem">
                    <MudText><Code>ChainmailLoot</Code> that increases the hero's <span class="armour">armour</span> by a fixed number.</MudText>
                </MudListItem>
                <MudListItem Icon="fas fa-shield">
                    <MudText><Code>DamageCrystalLoot</Code> that increases the hero's <span class="damage">damage</span> by a fixed number.</MudText>
                </MudListItem>
            </MudList>
        </MudListItem>
        <MudListItem Icon="fas fa-triangle-exclamation">
            <MudText Color="Color.Default">
                <Code>TrapRoom</Code> &ndash; a room where the hero unconditionally takes a percentage of their
                current <span class="health">health</span> as damage, unaffected by <span class="armour">armour</span>.
            </MudText>
        </MudListItem>
    </MudList>
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        <Code>LootRoom</Code> should have a public constructor that takes an instance of <Code>ILoot</Code>.
        Each of the three loot items should implement <Code>ILoot</Code> and have a public constructor that takes 
        in the strength of the loot: for <Code>HealthPotionLoot</Code> it is a <Code>float</Code>
        (amount of max <span class="health">health</span> healed), 
        for the other two it is an `<Code>int</Code> representing the number by which to increase the relevant statistic.
    </MudAlert>
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        <Code>TrapRoom</Code> should have a public constructor that takes a single <Code>float</Code>
        (amount of current <span class="health">health</span> lost).
    </MudAlert>    
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        Both of them need to implement <Code>IRoom</Code> and be located in the <Code>DungeonWalker.Logic.Rooms</Code> namespace.
    </MudAlert>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 2. &ndash; Abilities</MudText>    
    <MudText GutterBottom="true">
        Heroes and enemies will require special abilities. This is a design task.
        You need to figure out a sensible way of modelling these abilities and adding them
        to various characters. This will require changes to the existing combat logic.
    </MudText>
    <MudText>
        Automatic tests will not reference these abilities individually, but they will assume
        that characters that are supposed to have them indeed do have them.
    </MudText>
    <MudList id="abilities-list">
        <MudListItem Icon="fas fa-coins">
            <MudText Color="Color.Default">
                <Code>Bounty</Code> &ndash; permanently gain $2$ additional <span class="damage">attack damage</span> for every enemy defeated;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-wind">
            <MudText Color="Color.Default">
                <Code>Dodge</Code> &ndash; ignore the first enemy attack during an encounter;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-droplet">
            <MudText Color="Color.Default">
                <Code>Draining</Code> &ndash; heal for $33\%$ of <span class="health">health</span> damage dealt to enemies, rounded down;
                this is actual damage, not counting damage absorbed by  <span class="armour">armour</span> or <span class="barrier">barrier</span>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-wand-sparkles">
            <MudText Color="Color.Default">
                <Code>MagicDamage</Code> &ndash; ignore half of the enemy's <span class="armour">armour</span>, rounded down;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-hand-sparkles">
            <MudText Color="Color.Default">
                <Code>MagicShield</Code> &ndash; at the start of combat, gain $30$ <span class="barrier">barrier</span>;
                damage dealt to this character decreases <span class="barrier">barrier</span> first, before affecting their
                <span class="health">health</span>; at the end of an encounter <span class="barrier">barrier</span> is reduced to $0$.
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-heart-crack">
            <MudText Color="Color.Default">
                <Code>Piercing</Code> &ndash; decrease enemy <span class="armour">armour</span> by $5$ with every attack;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-weight-hanging">
            <MudText Color="Color.Default">
                <Code>Slow</Code> &ndash; after an attack has to wait a round before attacking again, <em>but</em> base damage
                of their attacks is doubled, i.e. equal to two times their <span class="damage">attack damage</span>;
            </MudText>
        </MudListItem>        
        <MudListItem Icon="fas fa-dumbbell">
            <MudText Color="Color.Default">
                <Code>Sturdy</Code> &ndash; all damage received is halved, rounded down, applied after standard <span class="armour">armour</span>
                reduction;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-hand-fist">
            <MudText Color="Color.Default">
                <Code>Tenacious</Code> &ndash; while below $25\%$ max health (rounded down), <span class="damage">attack damage</span> is increased by $20$.
            </MudText>
        </MudListItem>
    </MudList>
    <LatexRenderer ContainerId="abilities-list" />
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 3. &ndash; Heroes</MudText>   
    <MudText GutterBottom="true">
        First, add the <Code>Tenacious</Code> and <Code>Sturdy</Code> abilities to the <Code>Warrior</Code>.
    </MudText>
    <MudText>
        Add new heroes to the roster, using the abilities defined above:
    </MudText>
    <MudList id="heroes-list">
        <MudListItem Icon="fas fa-coins">
            <MudText Color="Color.Default">
                <Code>BountyHounter</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Class="mr-1"/> $50$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Class="mr-1"/> $20$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Class="mr-1"/> $15$</span> <Code>Bounty</Code>, <Code>Tenacious</Code>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-wind">
            <MudText Color="Color.Default">
                <Code>Rogue</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Class="mr-1"/> $40$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Class="mr-1"/> $30$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Class="mr-1"/> $5$</span> <Code>Dodge</Code>, <Code>Piercing</Code>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-wand-sparkles">
            <MudText Color="Color.Default">
                <Code>Warlock</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Class="mr-1"/> $20$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Class="mr-1"/> $25$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Class="mr-1"/> $7$</span> <Code>MagicalDamage</Code>, <Code>Draining</Code>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-hand-sparkles">
            <MudText Color="Color.Default">
                <Code>Wizard</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Class="mr-1"/> $40$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Class="mr-1"/> $30$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Class="mr-1"/> $5$</span> <Code>MagicalDamage</Code>, <Code>MagicalShield</Code>;
            </MudText>
        </MudListItem>
    </MudList>
    <LatexRenderer ContainerId="heroes-list" />
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        Each of these must be a subtype of <Code>Hero</Code> and have a public parameterless constructor.
        They should be located in the <Code>DungeonWalker.Logic.Characters.Heroes</Code> namespace.
    </MudAlert>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Task 4. &ndash; Enemies</MudText>    
    <MudText>
        And some enemies for them to fight!
    </MudText>
    <MudList id="enemies-list">
        <MudListItem Icon="fas fa-skull">
            <MudText Color="Color.Default">
                <Code>SkeletonArcher</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $20$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $25$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $5$</span> <Code>Dodge</Code>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-chess-rook">
            <MudText Color="Color.Default">
                <Code>Giant</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $50$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span> <Code>Slow</Code>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-wand-sparkles">
            <MudText Color="Color.Default">
                <Code>DarkSorcerer</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $10$</span> <Code>MagicalDamage</Code>;
            </MudText>
        </MudListItem>
        <MudListItem Icon="fas fa-crown">
            <MudText Color="Color.Default">
                <Code>DarkLord</Code> &ndash; 
                    <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $200$</span>
                    <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $50$</span>
                    <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span> <Code>MagicShield</Code>, <Code>Tenacious</Code>;
            </MudText>
        </MudListItem>
    </MudList>
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        Each of these must be a subtype of <Code>Enemy</Code> and have a public parameterless constructor.
        They should be located in the <Code>DungeonWalker.Logic.Characters.Enemies</Code> namespace.
    </MudAlert>
    <LatexRenderer ContainerId="enemies-list" />   
    <MudText GutterBottom="true">
        Finally, add a special <Code>EnemyGroup</Code> type that implements the <MudLink Href="https://refactoring.guru/design-patterns/composite">composite design pattern</MudLink>.
        It's an <Code>Enemy</Code> that consists of multiple other enemies.
    </MudText>
    <MudAlert Class="my-2" Variant="Variant.Outlined">
        <Code>EnemyGroup</Code> must be a subtype of <Code>Enemy</Code> and have a public constructor
        with a single parameter of type <Code>Enemy[]</Code>, containing the enemies in the group.
    </MudAlert>
    <MudText GutterBottom="true">
        When a group fights, it sends the enemy with largest <span class="armour">armour</span> value to the front as tank.
        All damage dealt to the group is dealt to that single enemy. When the group attacks all of its members attack at the
        same time, their abilities coming into play separately.
    </MudText>
    <MudText GutterBottom="true" id="example-fight-introduction">
        For example, consider a group consisting of a <Code>Giant</Code> and a <Code>DarkSorcerer</Code> facing
        a standard <Code>Warrior</Code> with <Code>Tenacious</Code> and stats 
            <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30/50$</span>
            <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $30$</span>
            <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span> &ndash; 
            they picked up a <Code>DamageCrystal</Code> that gave them <span class="damage">$5$ bonus damage</span>, but also
            lost <span class="health">$25$ health</span> already.
        The <Code>Giant</Code> starts at the front, because they have better armour than the <Code>DarkSorcerer</Code>.
    </MudText>
    <MudTimeline TimelinePosition="TimelinePosition.Left" id="example-fight-timeline">
        <MudTimelineItem Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" style="text-align: center">
            <ItemDot>
                <MudIcon Icon="fas fa-1" Size="Size.Medium" />
            </ItemDot>
            <ItemContent>
                <MudAlert Variant="Variant.Outlined">
                    <MudList Dense="true">
                        <MudListItem>
                            <strong>Warrior</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30/50$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $30$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span>
                        </MudListItem>
                        <MudListItem>
                            <strong>Giant</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $50/50$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span>
                        </MudListItem>
                        <MudListItem>
                            <strong>DarkSorcerer</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30/30$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $10$</span>
                        </MudListItem>
                    </MudList>
                    <MudText style="text-align: start">
                        The <Code>Warrior</Code> prepares an attack with <span class="damage">$30$ damage</span> and hits the <Code>Giant</Code> for <span class="health">$10$</span>, 
                        due to their <span class="armour">armour</span>. The <Code>Giant</Code> hits our hero hard with base <span class="damage">damage $40$</span>  
                        due to being Slow, which is reduced to <span class="health">$20$</span> by the <Code>Warrior</Code>'s <span class="armour">armour</span>.
                        The <Code>DarkSorcerer</Code> attacks for <span class="damage">$20$ damage</span> and ignores half of the <Code>Warrior</Code>'s <span class="armour">armour</span>.
                        Overall, the <Code>Giant</Code> loses <span class="health">$10$ health</span> and the <Code>Warrior</Code> loses <span class="health">$15$ health</span>
                        after the reductions from <Code>Sturdy</Code>.
                    </MudText>
                </MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" style="text-align: center">
            <ItemDot>
                <MudIcon Icon="fas fa-2" Size="Size.Medium"/>
            </ItemDot>
            
            <ItemContent>
                <MudAlert Variant="Variant.Outlined">
                    <MudList Dense="true">
                        <MudListItem>
                            <strong>Warrior</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $15/50$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $30$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span>
                        </MudListItem>
                        <MudListItem>
                            <strong>Giant</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $40/50$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span>
                        </MudListItem>
                        <MudListItem>
                            <strong>DarkSorcerer</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30/30$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $10$</span>
                        </MudListItem>
                    </MudList>
                    <MudText style="text-align: start">
                        The <Code>Warrior</Code> hits the <Code>Giant</Code> for <span class="health">$10$</span> again. The <Code>Giant</Code> doesn't attack, because they are Slow. 
                        The <Code>DarkSorcerer</Code> again deals the same damage, taking away <span class="health">$5$ health</span> from the <Code>Warrior</Code>
                        after the <Code>Sturdy</Code> reduction.
                    </MudText>
                </MudAlert>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" style="text-align: center">
            <ItemDot>
                <MudIcon Icon="fas fa-3" Size="Size.Medium"/>
            </ItemDot>
            <ItemContent>
                <MudAlert Variant="Variant.Outlined">
                    <MudList Dense="true">
                        <MudListItem>
                            <strong>Warrior</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $10/50$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $50$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span>
                        </MudListItem>
                        <MudListItem>
                            <strong>Giant</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30/50$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $20$</span>
                        </MudListItem>
                        <MudListItem>
                            <strong>DarkSorcerer</strong>: <span class="health mx-1"><MudIcon Icon="fas fa-heart" Size="@Size.Small" Class="mr-1"/> $30/30$</span>
                                                      <span class="damage mx-1"><MudIcon Icon="fas fa-bolt-lightning" Size="@Size.Small" Class="mr-1"/> $20$</span>
                                                      <span class="armour mx-1"><MudIcon Icon="fas fa-shield-blank" Size="@Size.Small" Class="mr-1"/> $10$</span>
                        </MudListItem>
                    </MudList>
                    <MudText style="text-align: start">
                        The <Code>Warrior</Code> now gains the bonus from <Code>Tenacious</Code>, due to being below <span class="health">$25\%$ max health</span>, which
                        in this case is <span class="health">$50 \cdot 0.25 = 12.5$</span>, which rounded down is <span class="health">$12$</span>. 
                        They deliver a massive blow with <span class="damage">$50$ damage</span> to the <Code>Giant</Code>, which is reduced to <span class="health">$30$</span>. 
                        It's enough to defeat the monster, but before they fall they take one last swing at the <Code>Warrior</Code>,
                        which combined with another spell from the <Code>DarkSorcerer</Code> would remove <span class="health">$15$ health</span>. Our
                        <Code>Warrior</Code> only has <span class="health">$10$</span>, so they fall, defeated, next to the <Code>Giant</Code>.
                    </MudText>
                    <MudText style="text-align: start">
                        The combat ends, with enemies being victorious. <Code>DarkSorcerer</Code> survives unscathed, while the others are dead.
                    </MudText>
                </MudAlert>
            </ItemContent>
        </MudTimelineItem>
    </MudTimeline>
    <LatexRenderer ContainerId="example-fight-introduction"/>
    <LatexRenderer ContainerId="example-fight-timeline"/>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Project structure and execution</MudText>
    <MudText GutterBottom="true">
        The solution is divided into three projects, the entry <Code>DungeonWalker</Code>,
        the logic in <Code>DungeonWalker.Logic</Code> and tests in
        <Code>DungeonWalker.Logic.Tests</Code>. There's no need for you to look at
        <Code>DungeonWalker</Code>, in particular it uses many C# features that we haven't covered yet.
        You shouldn't modify it, as it can cause tests to break.
    </MudText>
    <MudText GutterBottom="true">
        <Code>DungeonWalker.Logic</Code> is the project you should edit.
        You can add any code there and make changes to the existing code that you deem
        necessary to complete the assignment.
    </MudText>
    <MudText GutterBottom="true">
        <Code>DungeonWalker.Logic.Tests</Code> contains the automated tests.
        They will run automatically when you commit your changes, and you can run them
        manually with <Code Language="bash">dotnet test</Code>.
    </MudText>
    <MudAlert Severity="Severity.Warning">
        DO NOT edit the tests! You can freely add your own, but editing the existing
        graded tests in any way is prohibited. The tests exist so that everyone
        can have automated feedback and normalised grades for the tests. If you
        edit the existing test methods you will receive 0 points for tests.
    </MudAlert>
    <MudText>
        Running the code is described in the README. Remember that the test project will not
        compile until you provide the required classes. Your first step should be fixing all
        compile errors from the test project. Here's a little demo:
    </MudText>
    <Asciinema CastName="dungeon-walker-demo" />
    <MudText Typo="Typo.h2" Class="mx-auto py-2">Style</MudText>
    <MudText>
        More than half of the points are for style.
        The IDE will handle trivialities like formatting for you,
        that's not what this is about. We want to make sure that we know
        how to write clean, idiomatic C# code that would pass serious code review
        in a professional setting.
    </MudText>
    <MudList>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            Use the correct naming convention for a given member.
        </MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            DO NOT use abbreviations. If you look at the BCL you won't find monstrosities
            like <Code Language="C">strcmp</Code> or <Code Language="C">inet_pton</Code>.
            Only universally recognisable abbreviations of computer terms are allowed, like
            <Code>HttpClient</Code>, <Code>TcpSocket</Code> or <Code>XmlSerializer</Code>.
        </MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            Standard code guidelines that apply everywhere else also apply in C#:
            avoid code duplication, don't create overly long methods, use methods
            from the standard library where applicable.
        </MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            Follow best OOP practices. Don't introduce inheritance where it's not needed.
            Prefer abstract types to concrete ones as parameters and return types.
            In general, follow <MudLink Href="https://en.wikipedia.org/wiki/SOLID">SOLID</MudLink>.
        </MudListItem>
    </MudList>    
    <MudText>
        Remember, submitting code earlier will get you style feedback earlier,
        which can only improve your grade.
    </MudText>
</CourseAssignment>
@code {

}
