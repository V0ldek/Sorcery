@page "/teaching/csharp/11-blazor/1-hosted-services"
@inject CourseBook CourseBook;

@{
    var course = CourseBook.CSharpCourse["blazor"]["hosted-services"];
    var channels = CourseBook.CSharpCourse["concurrency"]["channels"];
}

<CourseSection Section="@course">
    <MudText GutterBottom="true">
        Normally, an ASP.NET Core server simply handles requests. An HTTP request comes, all of the machinery processes it, gives a response,
        and then ends. However, sometimes we want servers to be able to perform long-running tasks not tied to a particular request.
    </MudText>
    <MudText GutterBottom="true">
        A Hosted Service is a piece of code that runs on the server independent of requests. It will continue running
        even if users stop issuing requests. Usual use case is to have a worker service that performs tasks taken from some asynchronous queue.
    </MudText>
    <MudText>
        All you need to do to implement a Hosted Service is to inherit from <Code>BackgroundService</Code> and then implement its <Code>ExecuteAsync</Code>
        method. Channels that we covered in <MudLink Href="@channels.Route">@channels.DisplayName</MudLink> are an ideal asynchronous queue
        to use with such services.
    </MudText>
    <Resources Links=@(new [] {
               ("https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0&tabs=visual-studio", "Background tasks with hosted services in ASP.NET Core")
    })/>
</CourseSection>

@code {

}
