@page "/teaching/csharp/3-generics-and-collections/8-deconstruction"
@inject CourseBook CourseBook;

@{
    var course = CourseBook.CSharpCourse["generics-and-collections"]["deconstruction"];
}

<CourseSection Section="@course">
    <MudText GutterBottom="true">
        Next one in <MudLink Href="@GitHub.CSharpNotebooks" Target="_blank">the notebooks repository</MudLink>:
        <Highlight>@($"{course.Module.Id}-{course.Module.RouteName}/{course.Id}-{course.RouteName}.dib")</Highlight>.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">In this section we'll cover</MudText>
    <MudList>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            Deconstructing tuples.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            Deconstructing <Code>KeyValuePair&lt;TKey, TValue&gt;</Code>.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            Code patterns using deconstruction.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            Implementing deconstruction for custom types.
        </MudListItem>
        <MudListItem Icon="@Icons.Material.Filled.ChevronRight">
            Discarding irrelevant values.
        </MudListItem>
    </MudList>
    <Resources Links=@(new [] {
        ("https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/deconstruct", "Deconstructing tuples and other types"),
    })/>
</CourseSection>

@code {

}
