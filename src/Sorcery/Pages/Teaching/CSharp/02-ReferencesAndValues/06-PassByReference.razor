@page "/teaching/csharp/2-references-and-values/6-pass-by-reference"
@inject CourseBook CourseBook;

@{
    var section = CourseBook.CSharpCourse["references-and-values"]["pass-by-reference"];
}

<CourseSection Section="@(section)">
    <MudText GutterBottom="true">
        Next one in <MudLink Href="@GitHub.CSharpNotebooks" Target="_blank">the notebooks repository</MudLink>:
        <Highlight>@($"{section.Module.Id}-{section.Module.RouteName}/{section.Id}-{section.RouteName}.dib")</Highlight>.
    </MudText>
    <MudText Typo="Typo.h2" Class="mx-auto py-2">In this section we'll cover</MudText>
    <MudList>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            <MudText>
                Pass-by-value vs pass-by-reference.
            </MudText>
        </MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            <MudText>
                Pass-by-reference with <Code>out</Code> and <Code>ref</Code>.
            </MudText>
        </MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            <MudText>
                The <Code>TryX</Code> pattern.
            </MudText>
        </MudListItem>
        <MudListItem Icon="@Icons.Filled.ChevronRight">
            <MudText>
                Ignoring <Code>out</Code> parameters.
            </MudText>
        </MudListItem>
    </MudList>
    <Resources Links=@(new [] {
        ("https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#passing-an-argument-by-reference",
            "Passing an argument by reference (C# reference)"),
        ("https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier",
            "out parameter modifier (C# reference)")
    })/>
</CourseSection>

@code {

}
